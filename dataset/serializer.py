#!/usr/bin/env python
import codecs
import requests
import subprocess
import rdflib
import os

'''
This script will serialize rdf data from Blazegraph repository generated by ToolsEswc located at https://github.com/liyakun/ToolsEswc and remove non-relevant data. The output is generated into file
all_clean.ttl.gz in the same folder with this script.

This script uses python 2.7.6, and it has been tested on Linux Mint 17.3.
It should also run on Ubuntu with corresponding version of Linux Mint 17.3.

It should also able to run Windows as long as you have the corresponding python and shell tools installed.
'''

url = 'http://localhost:9999/blazegraph/sparql'
print 'The default url for Blazegraph running is: %s\n' % url
user_input = raw_input('If using the default url, please press Enter, else please input: ')

# if user input a specified url, use user input
if user_input != '':
    url = user_input

# check whether Blazegraph is running on http://localhost:9999/bigdata/sparql
request = requests.get(url)
if request.status_code == 200:
    print '\n' + url + ' exists\n'
else:
    raise ValueError('\n' + url + ' does not exist\n')

# remove most non relevant data by SPARQL query
arg = "curl --get -X DELETE -H 'Accept: application/xml' " + url + \
      " --data-urlencode 'query=PREFIX box: <http://fitlayout.github.io/ontology/render.owl#> PREFIX segm: " \
      "<http://fitlayout.github.io/ontology/segmentation.owl#> CONSTRUCT { ?a ?b ?c } " \
      "WHERE {{ ?a rdf:type segm:AreaTree } union { ?a rdf:type segm:LogicalArea } union " \
      "{ ?a rdf:type segm:Area } union { ?a rdf:type box:Box } union { ?a rdf:type box:Page } " \
      "union { ?a segm:ititle ?c  } union { ?a segm:ishort ?c  } union { ?a segm:idateplace ?c  } " \
      "union { ?a segm:iproceedings ?c  } union { ?a segm:istartdate ?c  } union { ?a segm:ienddate ?c  } " \
      "union { ?a segm:isubmitted ?c  } union { ?a segm:icoloc ?c  } union { ?a segm:editorname ?c  } " \
      "union { ?a segm:hasTag ?c  } union { ?a segm:support ?c  } ?a ?b ?c.}'"
subprocess.check_output(arg, shell=True)

# add license information, assuming license.ttl in current directory
arg = "curl -X POST -H 'Content-Type:application/x-turtle' --data-binary '@license.ttl' " + url

# serialize data from repository, you can also serialize with other formats, detail see 
# https://wiki.blazegraph.com/wiki/index.php/REST_API
arg = "curl -X POST " + url + " --data-urlencode 'query=CONSTRUCT  WHERE {hint:Query hint:analytic " + '"true"' +\
      " . hint:Query hint:constructDistinctSPO " + '"false"' + " . ?s ?p ?o }' -H 'Accept:application/x-turtle' " \
                                                               " > output.ttl"
subprocess.check_output(arg, shell=True)

# regenerate data set with abbreviations
g = rdflib.Graph()
rdf_result = g.parse('output.ttl', format='n3')
ns = rdflib.Namespace("http://fitlayout.github.io/ontology/segmentation.owl#")
rdf_result.remove((None, ns['country'], None))
rdf_result.remove((None, ns['related'], None))
s = g.serialize(format='n3')
with open('serialized.ttl', 'wb') as file_:
    file_.write(s)
os.remove('output.ttl')

# remove non relevant data
bad_words = ['hint:Query hint:analytic', 'hint:constructDistinctSPO', 'http://www.bigdata.com/',
             'http://www.openrdf.org/schema/sesame']
with open('serialized.ttl', 'rb') as old, open('removed.ttl', 'wb') as new:
    for line in old:
        if not any(bad_word in line for bad_word in bad_words):
            new.write(line)
os.remove('serialized.ttl')


